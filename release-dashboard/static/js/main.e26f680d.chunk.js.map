{"version":3,"sources":["types.js","actions.js","App.js","reducers.js","PollbotAPI.js","sagas.js","index.js","create-store.js"],"names":["products","ADD_CHECK_RESULT","REFRESH_CHECK_RESULT","ADD_SERVER_ERROR","SET_VERSION","UPDATE_PRODUCT_VERSIONS","UPDATE_RELEASE_INFO","UPDATE_POLLBOT_VERSION","REQUEST_ONGOING_VERSIONS","REQUEST_POLLBOT_VERSION","UPDATE_URL","REFRESH_STATUS","REQUEST_STATUS","localUrlFromVersion","_ref","_ref2","Object","slicedToArray","product","version","concat","setVersion","type","capitalize","item","charAt","toUpperCase","slice","updateProductVersions","versions","updatePollbotVersion","updateReleaseInfo","releaseInfo","addCheckResult","title","result","refreshCheckResult","addServerError","err","deliveryDashboardVersionData","require","parseUrl","url","parsed","match","_parsed","service","maybeProduct","find","p","App","_React$Component","inherits","_super","_createSuper","props","_this","classCallCheck","this","call","versionFromHash","parsedUrl","window","location","hash","dispatch","refreshIntervalId","createClass","key","value","_this2","shouldRefresh","setInterval","stopAutoRefresh","clearInterval","Notification","permission","requestPermission","onhashchange","setUpAutoRefresh","react","Errors","errors","className","SideBar","CurrentRelease","VersionLink","versionData","pollbotVersion","React","ConnectedApp","connect","state","checkResults","productVersions","getVersion","channel","capitalizedChannel","hasOwnProperty","ListGroupItem","tag","href","Spinner","color","ListGroup","active","productVersion","_ref3","_productVersion","message","Container","Row","Col","md","style","float","OverallStatus","checks","map","check","App_DisplayCheckResult","actionable","checkResult","length","error","_error","Alert","_ref4","some","actionableChecks","nonActionableChecks","push","status","DisplayCheckResult","_React$PureComponent","_super2","apply","arguments","_this$props","titleContent","getLabelClass","Tooltip","placement","trigger","Card","CardHeader","CardBody","backgroundColor","CardLink","link","_ref5","commit","source","sourceUrl","replace","initialState","thunderbird","deliveryDashboard","updatedCheckResults","undefined","action","assign","defineProperty","getOngoingVersions","_x","_getOngoingVersions","_callee","response","regenerator_default","a","wrap","_context","prev","next","fetch","pollbotUrl","sent","abrupt","json","stop","getReleaseInfo","_x2","_x3","_getReleaseInfo","_callee2","_context2","checkStatus","_x4","_checkStatus","_callee3","_context3","getPollbotVersion","_getPollbotVersion","_callee4","_context4","fetchPollbotVersion","fetchAndUpdateVersions","fetchOngoingVersions","updateUrl","checkResultAndUpdateAndNotify","refreshStatus","checkResultAndUpdate","requestStatus","rootSaga","put","t0","console","_marked","_marked2","all","_marked3","select","_marked4","prevResult","notifyChanges","_context5","checkTitle","_marked5","prevResults","_context6","filter","_marked6","_context7","_marked7","_yield$select","_yield$select2","_context8","keys","_marked8","_context9","takeEvery","_marked9","__webpack_require__","d","__webpack_exports__","URLSearchParams","search","get","root","document","getElementById","ReactDOM","render","react_default","createElement","es","store","loggerMiddleware","createLogger","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunkMiddleware","run","src_App_0"],"mappings":"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","file":"static/js/main.e26f680d.chunk.js","sourcesContent":["// @flow\nimport type {\n  Store as ReduxStore,\n  ThunkAction as ReduxThunkAction,\n  Dispatch as ReduxDispatch,\n  GetState as ReduxGetState\n} from \"redux\";\n\nexport const products = [\"thunderbird\"];\n\n/*\n * state types\n */\nexport type Product = \"thunderbird\";\nexport type Status = \"missing\" | \"exists\" | \"incomplete\" | \"error\";\n\nexport type ChannelVersion = [string, string];\nexport type ChannelVersions = ChannelVersion[];\nexport type VersionsDict = { [channel: string]: string };\nexport type ProductVersions = {\n  [product: Product]: VersionsDict\n};\n\nexport type CheckInfo = {\n  +url: string,\n  +title: string,\n  +actionable: boolean\n};\n\nexport type ReleaseInfo = {\n  +channel: string,\n  +product: Product,\n  +version: string,\n  +checks: CheckInfo[],\n  +message: string,\n  +status: number\n};\n\nexport type CheckResult = {\n  +status: Status,\n  +message: string,\n  +link: string\n};\n\nexport type CheckResults = {\n  [check: string]: CheckResult\n};\n\nexport type APIVersionData = {\n  build: string,\n  version: string,\n  source: string,\n  commit: string\n};\n\n/* Error: [title, errorMessage] */\nexport type Error = [string, string];\n\nexport type State = {\n  +version: [Product, string],\n  +productVersions: ProductVersions,\n  +releaseInfo: ?ReleaseInfo,\n  +checkResults: CheckResults,\n  +pollbotVersion: ?APIVersionData,\n  +shouldRefresh: boolean,\n  +errors: Error[]\n};\n\n/*\n * action types\n */\nexport const ADD_CHECK_RESULT = \"ADD_CHECK_RESULT\";\nexport const REFRESH_CHECK_RESULT = \"REFRESH_CHECK_RESULT\";\nexport const ADD_SERVER_ERROR = \"ADD_SERVER_ERROR\";\nexport const SET_VERSION = \"SET_VERSION\";\nexport const UPDATE_PRODUCT_VERSIONS = \"UPDATE_PRODUCT_VERSIONS\";\nexport const UPDATE_RELEASE_INFO = \"UPDATE_RELEASE_INFO\";\nexport const UPDATE_POLLBOT_VERSION = \"UPDATE_POLLBOT_VERSION\";\n\nexport type AddCheckResult = {|\n  type: \"ADD_CHECK_RESULT\",\n  title: string,\n  result: CheckResult\n|};\nexport type RefreshCheckResult = {|\n  type: \"REFRESH_CHECK_RESULT\",\n  title: string\n|};\nexport type AddServerError = {|\n  type: \"ADD_SERVER_ERROR\",\n  title: string,\n  err: string\n|};\nexport type SetVersion = {|\n  type: \"SET_VERSION\",\n  product: Product,\n  version: string\n|};\nexport type UpdateProductVersions = {|\n  type: \"UPDATE_PRODUCT_VERSIONS\",\n  versions: VersionsDict,\n  product: Product\n|};\nexport type UpdateReleaseInfo = {|\n  type: \"UPDATE_RELEASE_INFO\",\n  releaseInfo: ReleaseInfo\n|};\nexport type UpdatePollbotVersion = {|\n  type: \"UPDATE_POLLBOT_VERSION\",\n  version: APIVersionData\n|};\n\n/*\n * saga types\n */\nexport const REQUEST_ONGOING_VERSIONS = \"REQUEST_ONGOING_VERSIONS\";\nexport const REQUEST_POLLBOT_VERSION = \"REQUEST_POLLBOT_VERSION\";\nexport const UPDATE_URL = \"UPDATE_URL\";\nexport const REFRESH_STATUS = \"REFRESH_STATUS\";\nexport const REQUEST_STATUS = \"REQUEST_STATUS\";\n\nexport type RequestOngoingVersions = {|\n  type: \"REQUEST_ONGOING_VERSIONS\"\n|};\n\nexport type RequestPollbotVersion = {|\n  type: \"REQUEST_POLLBOT_VERSION\"\n|};\n\nexport type UpdateUrl = {|\n  type: \"UPDATE_URL\"\n|};\n\nexport type RefreshStatus = {|\n  type: \"REFRESH_STATUS\"\n|};\n\nexport type RequestStatus = {|\n  type: \"REQUEST_STATUS\",\n  product: Product,\n  version: string\n|};\n\nexport type Action =\n  | AddCheckResult\n  | RefreshCheckResult\n  | AddServerError\n  | RefreshStatus\n  | RequestOngoingVersions\n  | RequestPollbotVersion\n  | RequestStatus\n  | SetVersion\n  | UpdateProductVersions\n  | UpdatePollbotVersion\n  | UpdateReleaseInfo\n  | UpdateUrl;\n\n/*\n * Redux types\n */\nexport type GetState = ReduxGetState<State>;\nexport type ThunkAction<Result> = ReduxThunkAction<State, Action, Result>;\nexport type Store = ReduxStore<State, Action>;\nexport type Dispatch = ReduxDispatch<State, Action>;\n","// @flow\n\nimport {\n  ADD_CHECK_RESULT,\n  REFRESH_CHECK_RESULT,\n  ADD_SERVER_ERROR,\n  SET_VERSION,\n  UPDATE_PRODUCT_VERSIONS,\n  UPDATE_POLLBOT_VERSION,\n  UPDATE_RELEASE_INFO,\n  REQUEST_ONGOING_VERSIONS,\n  REQUEST_POLLBOT_VERSION,\n  UPDATE_URL,\n  REFRESH_STATUS,\n  REQUEST_STATUS\n} from \"./types\";\nimport type {\n  AddCheckResult,\n  AddServerError,\n  APIVersionData,\n  CheckResult,\n  VersionsDict,\n  Product,\n  RefreshCheckResult,\n  RefreshStatus,\n  ReleaseInfo,\n  RequestOngoingVersions,\n  RequestPollbotVersion,\n  RequestStatus,\n  SetVersion,\n  UpdateProductVersions,\n  UpdatePollbotVersion,\n  UpdateReleaseInfo,\n  UpdateUrl\n} from \"./types\";\n\n// Small utility function.\nexport const localUrlFromVersion = ([product, version]: [Product, string]) =>\n  `#pollbot/${product}/${version}`;\n\n/*\n * action creators\n */\n\nexport function setVersion(product: Product, version: string): SetVersion {\n  return { type: SET_VERSION, product, version };\n}\n\nexport const sortByVersion = (a: string, b: string) => {\n  const partsA = a.split(\".\");\n  const partsB = b.split(\".\");\n  if (partsA.length < 2 || partsB.length < 2) {\n    // Bogus version, list it last.\n    return 1;\n  }\n  let i = 0;\n  while (partsA[i] === partsB[i] && i <= partsA.length) {\n    // Skip all the parts that are equal.\n    i++;\n  }\n  if (!partsA[i] || !partsB[i]) {\n    // Both versions have the same first parts, but one may have more parts, eg\n    // 56.0 and 56.0.1.\n    return partsB.length - partsA.length;\n  }\n  // We have been through all the similar parts, we now have to deal with the\n  // first part which is different.\n  const subPartRegex = /^(\\d+)([a-zA-Z]+)?(\\d+)?([a-zA-Z]+)?/; // Eg: 0b12pre\n  const subPartA = partsA[i].match(subPartRegex); // Eg: [\"0b1pre\", \"0\", \"b\", \"12\", \"pre\"]\n  const subPartB = partsB[i].match(subPartRegex);\n  if (!subPartA || !subPartB) {\n    // Bogus version, list it last.\n    return 1;\n  }\n  if (subPartA[1] !== subPartB[1]) {\n    return parseInt(subPartB[1], 10) - parseInt(subPartA[1], 10);\n  }\n  if (subPartA[2] !== subPartB[2]) {\n    // Suffix like 'a' or 'b'.\n    if (subPartA[2] && !subPartB[2]) {\n      return 1;\n    }\n    if (subPartB[2] && !subPartA[2]) {\n      return -1;\n    }\n    return subPartB[2].localeCompare(subPartA[2]);\n  }\n  return parseInt(subPartB[3], 10) - parseInt(subPartA[3], 10);\n};\n\nexport const capitalize = (item: string) =>\n  item.charAt(0).toUpperCase() + item.slice(1);\n\nexport const capitalizeChannel = ([channel, version]: [string, string]) => [\n  capitalize(channel),\n  version\n];\n\nexport function updateProductVersions(\n  product: Product,\n  versions: VersionsDict\n): UpdateProductVersions {\n  return { type: UPDATE_PRODUCT_VERSIONS, product, versions };\n}\n\nexport function updatePollbotVersion(\n  version: APIVersionData\n): UpdatePollbotVersion {\n  return { type: UPDATE_POLLBOT_VERSION, version };\n}\n\nexport function updateReleaseInfo(releaseInfo: ReleaseInfo): UpdateReleaseInfo {\n  return { type: UPDATE_RELEASE_INFO, releaseInfo };\n}\n\nexport function addCheckResult(\n  title: string,\n  result: CheckResult\n): AddCheckResult {\n  return { type: ADD_CHECK_RESULT, title, result };\n}\n\nexport function refreshCheckResult(title: string): RefreshCheckResult {\n  return { type: REFRESH_CHECK_RESULT, title };\n}\n\nexport function addServerError(title: string, err: string): AddServerError {\n  return { type: ADD_SERVER_ERROR, title, err };\n}\n\n// For sagas\nexport function requestPollbotVersion(): RequestPollbotVersion {\n  return { type: REQUEST_POLLBOT_VERSION };\n}\n\nexport function requestOngoingVersions(): RequestOngoingVersions {\n  return { type: REQUEST_ONGOING_VERSIONS };\n}\n\nexport function updateUrl(): UpdateUrl {\n  return { type: UPDATE_URL };\n}\n\nexport function refreshStatus(): RefreshStatus {\n  return { type: REFRESH_STATUS };\n}\n\nexport function requestStatus(\n  product: Product,\n  version: string\n): RequestStatus {\n  return { type: REQUEST_STATUS, product, version };\n}\n","// @flow\nimport './bootstrap-charming.css';\nimport * as React from \"react\";\nimport {\n  Alert, Container, Row, Col,\n  Card, CardHeader, CardLink, CardBody,\n  Navbar, NavbarBrand,\n  ListGroup, ListGroupItem,\n  Spinner, Tooltip\n} from \"reactstrap\";\nimport \"./App.css\";\nimport {connect} from \"react-redux\";\nimport type {MapStateToProps} from \"react-redux\";\nimport {\n  capitalize,\n  localUrlFromVersion,\n  requestOngoingVersions,\n  requestPollbotVersion,\n  refreshStatus,\n  requestStatus\n} from \"./actions\";\nimport type {\n  APIVersionData,\n  CheckResult,\n  CheckResults,\n  Dispatch,\n  Error,\n  ProductVersions,\n  Product,\n  ReleaseInfo,\n  State,\n} from \"./types\";\nimport {products} from \"./types\";\n\nconst deliveryDashboardVersionData: APIVersionData = require(\"./version.json\");\n\nfunction requestNotificationPermission(): void {\n  // Some browsers don't support Notification yet. I'm looking at you iOS Safari\n  if (\"Notification\" in window) {\n    if (\n      Notification.permission !== \"denied\" &&\n      Notification.permission !== \"granted\"\n    ) {\n      Notification.requestPermission();\n    }\n  }\n}\n\nexport const parseUrl = (\n  url: string\n): ?{ service: string, product: Product, version: string } => {\n  const re = /^#(\\w+)\\/(\\w+)\\/([^/]+)\\/?/; // Eg: #pollbot/thunderbird/50.0\n  const parsed: ?(string[]) = url.match(re);\n  if (!parsed) {\n    return null;\n  }\n  const [, service, product, version] = parsed;\n  const maybeProduct = products.find(p => p === product);\n  if (!maybeProduct) {\n    // unsupported/unrecognized product.\n    return null;\n  }\n  return {\n    service: service,\n    product: maybeProduct,\n    version: version\n  };\n};\n\ntype AppProps = {\n  checkResults: CheckResults,\n  dispatch: Dispatch,\n  pollbotVersion: APIVersionData,\n  shouldRefresh: boolean,\n  errors: Error[]\n};\n\nexport class App extends React.Component<AppProps, void> {\n  refreshIntervalId: ?IntervalID;\n\n  constructor(props: AppProps): void {\n    super(props);\n    this.refreshIntervalId = null;\n  }\n\n  setUpAutoRefresh(): void {\n    if (this.props.shouldRefresh) {\n      if (this.refreshIntervalId) {\n        // The auto-refresh is already enabled.\n        return;\n      }\n      this.refreshIntervalId = setInterval(\n        () => this.props.dispatch(refreshStatus()),\n        60000\n      );\n    } else {\n      this.stopAutoRefresh();\n    }\n  }\n\n  stopAutoRefresh(): void {\n    if (this.refreshIntervalId) {\n      clearInterval(this.refreshIntervalId);\n      this.refreshIntervalId = null;\n    }\n  }\n\n  componentDidMount(): void {\n    this.props.dispatch(requestPollbotVersion());\n    this.props.dispatch(requestOngoingVersions());\n    // Setup notifications.\n    requestNotificationPermission();\n    // Listen to url hash changes.\n    window.onhashchange = this.versionFromHash;\n    // Check if we have a version in the url.\n    this.versionFromHash();\n  }\n\n  componentDidUpdate(): void {\n    this.setUpAutoRefresh();\n  }\n\n  componentWillUnmount(): void {\n    this.stopAutoRefresh();\n  }\n\n  versionFromHash = (): void => {\n    const parsedUrl = parseUrl(window.location.hash);\n    if (parsedUrl) {\n      this.props.dispatch(requestStatus(parsedUrl.product, parsedUrl.version));\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Errors errors={this.props.errors}/>\n        <div className=\"main\">\n          <div className=\"sidebar\">\n            <SideBar/>\n          </div>\n          <div className=\"content\">\n            <CurrentRelease/>\n          </div>\n        </div>\n        <footer>\n          Thunderbird Release Dashboard version:{\" \"}\n          <VersionLink versionData={deliveryDashboardVersionData}/>\n          &nbsp;--&nbsp;Pollbot version:{\" \"}\n          <VersionLink versionData={this.props.pollbotVersion}/>\n        </footer>\n      </div>\n    );\n  }\n}\n\nconst connectedAppMapStateToProps: MapStateToProps<*, *, *> = (\n  state: State\n) => ({\n  checkResults: state.checkResults,\n  pollbotVersion: state.pollbotVersion,\n  shouldRefresh: state.shouldRefresh,\n  errors: state.errors\n});\nexport const ConnectedApp = connect(\n  connectedAppMapStateToProps,\n  (dispatch: Dispatch) => ({dispatch: dispatch})\n)(App);\n\nconst sideBarMapStateToProps: MapStateToProps<*, *, *> = (state: State) => ({\n  versions: state.productVersions\n});\nconst SideBar = connect(sideBarMapStateToProps)(ReleasesMenu);\n\ntype ReleasesMenuPropType = {\n  versions: ProductVersions\n};\n\nexport function ReleasesMenu({versions}: ReleasesMenuPropType) {\n  const getVersion = (product, channel) => {\n    const capitalizedChannel = capitalize(channel);\n    if (versions.hasOwnProperty(product) && versions[product][channel]) {\n      return (\n        <ListGroupItem tag=\"a\"\n                       href={localUrlFromVersion([product, channel])}\n        >{`${capitalizedChannel}: ${versions[product][channel]}`}</ListGroupItem>\n      );\n    } else {\n      return (\n        <span>\n          {capitalizedChannel}: <Spinner type=\"grow\" color=\"dark\" />\n        </span>\n      );\n    }\n  };\n  return (\n    <ListGroup>\n      <ListGroupItem active>Channels</ListGroupItem>\n      {getVersion(\"thunderbird\", \"nightly\")}\n      {getVersion(\"thunderbird\", \"beta\")}\n      {getVersion(\"thunderbird\", \"release\")}\n    </ListGroup>\n  );\n}\n\nconst currentReleaseMapStateToProps: MapStateToProps<*, *, *> = (\n  state: State\n) => ({\n  checkResults: state.checkResults,\n  releaseInfo: state.releaseInfo,\n  productVersion: state.version\n});\nconst CurrentRelease = connect(currentReleaseMapStateToProps)(Dashboard);\n\ntype ErrorsPropType = {\n  errors: Error[]\n};\n\nexport function Errors({errors}: ErrorsPropType) {\n  if (!errors || errors.length === 0) {\n    return null;\n  }\n  return (\n    <div className=\"errors\">\n      {errors.map(error => {\n        const [title, err] = error;\n        return (\n          <Alert color=\"danger\">\n            {\"Failed getting check result for '\" + title + \"': \" + err}\n          </Alert>\n        );\n      })}\n      <br/>\n    </div>\n  );\n}\n\ntype DashboardPropType = {\n  checkResults: CheckResults,\n  releaseInfo: ?ReleaseInfo,\n  productVersion: [Product, string]\n};\n\nexport function Dashboard({\n                            releaseInfo,\n                            checkResults,\n                            productVersion\n                          }: DashboardPropType) {\n  const [product, version] = productVersion;\n  if (version === \"\") {\n    return (\n      <p>\n        Learn more about a specific version.\n        <strong> Select a version number from the left menu.</strong>\n      </p>\n    );\n  } else if (!releaseInfo) {\n    return <Spinner type=\"grow\" color=\"dark\" />;\n  } else if (releaseInfo.message) {\n    return <Errors errors={[[\"Pollbot error\", releaseInfo.message]]}/>;\n  } else {\n    return (\n      <Container>\n        <Row>\n          <Col md={\"10\"}>\n            <h2>\n              {capitalize(product)} {version}{\" \"}\n            </h2>\n          </Col>\n          <Col md={\"2\"} style={{float: \"right\"}}>\n            <OverallStatus\n              releaseInfo={releaseInfo}\n              checkResults={checkResults}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <div className=\"dashboard\">\n            {releaseInfo.checks.map(check => (\n              <DisplayCheckResult\n                key={check.title}\n                title={check.title}\n                actionable={check.actionable}\n                checkResult={checkResults[check.title]}\n              />\n            ))}\n          </div>\n        </Row>\n      </Container>\n    );\n  }\n}\n\ntype OverallStatusPropType = {\n  checkResults: CheckResults,\n  releaseInfo: ReleaseInfo\n};\n\nexport function OverallStatus({\n                                releaseInfo,\n                                checkResults\n                              }: OverallStatusPropType) {\n  const checksStatus = releaseInfo.checks.map(\n    check => checkResults[check.title]\n  );\n  const allChecksCompleted = !checksStatus.some(\n    result => typeof result === \"undefined\"\n  );\n  if (!allChecksCompleted) {\n    return <Spinner type=\"grow\" color=\"dark\" />;\n  }\n\n  let actionableChecks = [];\n  let nonActionableChecks = [];\n  releaseInfo.checks.map(check => {\n    if (check.actionable) {\n      actionableChecks.push(checkResults[check.title].status);\n    } else {\n      nonActionableChecks.push(checkResults[check.title].status);\n    }\n    return check;\n  });\n  let type;\n  let message;\n  if (actionableChecks.some(status => status !== \"exists\")) {\n    type = \"danger\";\n    message = \"Some checks failed\";\n  } else {\n    type = \"success\";\n    message = \"All checks are successful\";\n  }\n  return (\n    <Alert color={type} message={message}>\n      {message}\n    </Alert>\n  );\n}\n\ntype DisplayCheckResultProps = {\n  title: string,\n  actionable: boolean,\n  checkResult: CheckResult\n};\n\nexport class DisplayCheckResult extends React.PureComponent<DisplayCheckResultProps,\n  void> {\n  render() {\n    const getLabelClass = (checkResult, actionable) => {\n      if (checkResult) {\n        if (checkResult.status === \"error\") {\n          return \"danger\";\n        }\n        if (checkResult.status === \"exists\") {\n          return \"success\";\n        }\n        if (actionable) {\n          return \"warning\";\n        }\n        return \"info\"; // It's a non actionable item.\n      }\n      return \"info\"\n    };\n\n    const {title, actionable, checkResult} = this.props;\n    let titleContent = title;\n    let color = getLabelClass(checkResult, actionable);\n    if (!actionable) {\n      titleContent = (\n        <div>\n          <Tooltip placement=\"bottom\" trigger={\"hover\"}>\n            {title}\n          </Tooltip>\n        </div>\n      );\n    }\n    return (\n      <Card color={color}>\n        <CardHeader>{titleContent}</CardHeader>\n        <CardBody style={{backgroundColor: '#fff'}}>\n          {checkResult ? (\n            <CardLink href={checkResult.link}>\n              {checkResult.message}\n            </CardLink>\n          ) : (\n            <Spinner type=\"grow\" color=\"dark\" />\n          )}\n        </CardBody>\n      </Card>\n    );\n  }\n}\n\nfunction VersionLink({versionData}: { versionData: APIVersionData }) {\n  if (!versionData) {\n    return null;\n  }\n  const {commit, source, version} = versionData;\n  const sourceUrl = source.replace(/\\.git/, \"\");\n  const url = `${sourceUrl}/commit/${commit}`;\n  return <a href={url}>{version}</a>;\n}\n\nexport default ConnectedApp;\n","// @flow\n\nimport {\n  ADD_CHECK_RESULT,\n  REFRESH_CHECK_RESULT,\n  ADD_SERVER_ERROR,\n  SET_VERSION,\n  UPDATE_PRODUCT_VERSIONS,\n  UPDATE_POLLBOT_VERSION,\n  UPDATE_RELEASE_INFO\n} from \"./types\";\nimport type { Action, State } from \"./types\";\n\nexport const initialState: State = {\n  version: [\"thunderbird\", \"\"],\n  productVersions: { thunderbird: {} },\n  releaseInfo: null,\n  checkResults: {},\n  pollbotVersion: null,\n  shouldRefresh: false,\n  errors: []\n};\n\nexport function deliveryDashboard(\n  state: State = initialState,\n  action: Action\n): State {\n  let errors;\n  let updatedCheckResults;\n  switch (action.type) {\n    case ADD_CHECK_RESULT:\n      return Object.assign({}, state, {\n        checkResults: Object.assign({}, state.checkResults, {\n          [action.title]: action.result\n        }),\n        shouldRefresh:\n          action.result.status !== \"exists\" ? true : state.shouldRefresh\n      });\n    case REFRESH_CHECK_RESULT:\n      updatedCheckResults = Object.assign({}, state.checkResults);\n      delete updatedCheckResults[action.title];\n      return Object.assign({}, state, {\n        checkResults: updatedCheckResults\n      });\n    case ADD_SERVER_ERROR:\n      errors = state.errors.slice();\n      errors.push([action.title, action.err]);\n      return Object.assign({}, state, {\n        errors: errors,\n        shouldRefresh: true\n      });\n    case SET_VERSION:\n      return Object.assign({}, state, {\n        version: [action.product, action.version],\n        checkResults: {},\n        shouldRefresh: false,\n        errors: []\n      });\n    case UPDATE_PRODUCT_VERSIONS:\n      return Object.assign({}, state, {\n        productVersions: Object.assign({}, state.productVersions, {\n          [action.product]: action.versions\n        })\n      });\n    case UPDATE_RELEASE_INFO:\n      return Object.assign({}, state, {\n        releaseInfo: action.releaseInfo\n      });\n    case UPDATE_POLLBOT_VERSION:\n      return Object.assign({}, state, {\n        pollbotVersion: action.version\n      });\n    default:\n      return state;\n  }\n}\n","// @flow\nimport { pollbotUrl } from \"./index\";\nimport type {\n  APIVersionData,\n  CheckResult,\n  ProductVersions,\n  Product,\n  ReleaseInfo\n} from \"./types\";\n\nexport async function getOngoingVersions(\n  product: Product\n): Promise<ProductVersions> {\n  const response = await fetch(`${pollbotUrl}/${product}/ongoing-versions`);\n  return response.json();\n}\n\nexport async function getReleaseInfo(\n  product: Product,\n  version: string\n): Promise<ReleaseInfo> {\n  const response = await fetch(`${pollbotUrl}/${product}/${version}`);\n  return response.json();\n}\n\nexport async function checkStatus(url: string): Promise<CheckResult> {\n  const response = await fetch(url);\n  return response.json();\n}\n\nexport async function getPollbotVersion(): Promise<APIVersionData> {\n  const response = await fetch(`${pollbotUrl}/__version__`);\n  return response.json();\n}\n","// @flow\n\nimport {\n  REQUEST_ONGOING_VERSIONS,\n  REQUEST_POLLBOT_VERSION,\n  UPDATE_URL,\n  REFRESH_STATUS,\n  REQUEST_STATUS,\n  products\n} from \"./types\";\nimport type {\n  APIVersionData,\n  CheckResult,\n  VersionsDict,\n  Product,\n  ReleaseInfo,\n  RequestStatus,\n  State\n} from \"./types\";\nimport { all, call, put, select, takeEvery } from \"redux-saga/effects\";\nimport {\n  checkStatus,\n  getOngoingVersions,\n  getPollbotVersion,\n  getReleaseInfo\n} from \"./PollbotAPI\";\nimport {\n  addCheckResult,\n  addServerError,\n  localUrlFromVersion,\n  refreshCheckResult,\n  setVersion,\n  updateProductVersions,\n  updatePollbotVersion,\n  updateReleaseInfo\n} from \"./actions\";\n\ntype Saga = Generator<*, void, *>;\n\n// Fetching the version from the Pollbot service.\nexport function* fetchPollbotVersion(): Saga {\n  try {\n    const version: APIVersionData = yield call(getPollbotVersion);\n    yield put(updatePollbotVersion(version));\n  } catch (err) {\n    console.error(\"Failed getting the pollbot version\", err);\n  }\n}\n\nexport function* fetchAndUpdateVersions(product: Product): Saga {\n  try {\n    const versions: VersionsDict = yield call(getOngoingVersions, product);\n    yield put(updateProductVersions(product, versions));\n  } catch (err) {\n    console.error(\n      \"Failed getting the latest channel versions for product: \" + product,\n      err\n    );\n  }\n}\n\n// Fetching the ongoing versions.\nexport function* fetchOngoingVersions(): Saga {\n  yield all(products.map(product => call(fetchAndUpdateVersions, product)));\n}\n\n// Update the url from the version stored in the state.\nexport function* updateUrl(): Saga {\n  const state: State = yield select();\n  window.location.hash = localUrlFromVersion(state.version);\n}\n\nexport function* checkResultAndUpdateAndNotify(\n  title: string,\n  url: string,\n  prevResult: CheckResult\n): Saga {\n  const notifyChanges = (checkTitle, status) => {\n    if (Notification.permission === \"granted\") {\n      new Notification(`${checkTitle}: status changed (${status}).`);\n    }\n  };\n\n  // Make sure the check we're refreshing is shown as being refreshed.\n  yield put(refreshCheckResult(title));\n  yield call(checkResultAndUpdate, title, url);\n  const state: State = yield select();\n  const result: CheckResult = state.checkResults && state.checkResults[title];\n  if (prevResult && result && prevResult.status !== result.status) {\n    notifyChanges(title, result.status);\n  }\n}\n\n// Refreshing a status for the current version.\nexport function* refreshStatus(): Saga {\n  const state: State = yield select();\n  // Save previous results so we can check if something changed.\n  const prevResults = state.checkResults;\n  if (state.releaseInfo && state.releaseInfo.checks) {\n    yield all(\n      state.releaseInfo.checks\n        // only refresh checks that were failing.\n        .filter(({ title }) => state.checkResults[title].status !== \"exists\")\n        .map(({ url, title }) =>\n          call(checkResultAndUpdateAndNotify, title, url, prevResults[title])\n        )\n    );\n  }\n}\n\nexport function* checkResultAndUpdate(title: string, url: string): Saga {\n  try {\n    const result = yield call(checkStatus, url);\n    yield put(addCheckResult(title, result));\n  } catch (err) {\n    console.error(`Failed getting ${title} check result`, err);\n    yield put(addServerError(title, err));\n  }\n}\n\n// Requesting a status for a new version.\nexport function* requestStatus(action: RequestStatus): Saga {\n  let { product, version } = action;\n  let { productVersions } = yield select();\n  try {\n    if (\n      Object.keys(productVersions).length === 0 ||\n      !productVersions.hasOwnProperty(product) ||\n      Object.keys(productVersions[product]).length === 0\n    ) {\n      // We don't have the product channel versions yet.\n      const versions = yield call(getOngoingVersions, product);\n      yield put(updateProductVersions(product, versions));\n      // We now have the product channel versions.\n      ({ productVersions } = yield select());\n    }\n    if (productVersions[product].hasOwnProperty(version)) {\n      version = productVersions[product][version];\n    }\n    yield put(setVersion(product, version));\n    yield call(updateUrl);\n    const releaseInfo: ReleaseInfo = yield call(\n      getReleaseInfo,\n      product,\n      version\n    );\n    yield put(updateReleaseInfo(releaseInfo));\n    yield all(\n      releaseInfo.checks.map(({ url, title }) =>\n        call(checkResultAndUpdate, title, url)\n      )\n    );\n  } catch (err) {\n    console.error(\n      `Failed getting the release info for ${product} ${version}`,\n      err\n    );\n  }\n}\n\n// Root saga.\nexport function* rootSaga(): Saga {\n  yield all([\n    takeEvery(REQUEST_ONGOING_VERSIONS, fetchOngoingVersions),\n    takeEvery(REQUEST_POLLBOT_VERSION, fetchPollbotVersion),\n    takeEvery(UPDATE_URL, updateUrl),\n    takeEvery(REFRESH_STATUS, refreshStatus),\n    takeEvery(REQUEST_STATUS, requestStatus)\n  ]);\n}\n","// @flow\nimport ConnectedApp from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport createStore from \"./create-store\";\n\nconst searchParams = new URLSearchParams(window.location.search);\nexport const pollbotUrl =\n  searchParams.get(\"server\") || \"https://pollbot.services.mozilla.com/v1\";\n\nconst root = document && document.getElementById(\"root\");\n\nif (root) {\n  ReactDOM.render(\n    <Provider store={createStore()}>\n      <ConnectedApp />\n    </Provider>,\n    root\n  );\n}\n","// @flow\n\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { deliveryDashboard } from \"./reducers\";\nimport createSagaMiddleware from \"redux-saga\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport type { Store } from \"./types\";\nimport { rootSaga } from \"./sagas\";\n\n/**\n * Isolate the store creation into a function, so that it can be used outside of the\n * app's execution context, e.g. for testing.\n * @return {object} Redux store.\n */\nexport default function initializeStore(): Store {\n  const loggerMiddleware = createLogger();\n  const sagaMiddleware = createSagaMiddleware();\n  // This is the middleware needed for the redux-devtools extension.\n  const composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n  let store: Store = createStore(\n    deliveryDashboard,\n    // $FlowFixMe\n    composeEnhancers(\n      applyMiddleware(\n        sagaMiddleware,\n        thunkMiddleware, // lets us dispatch() functions\n        loggerMiddleware // neat middleware that logs actions\n      )\n    )\n  );\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}\n"],"sourceRoot":""}